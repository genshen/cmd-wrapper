use std::env;


fn pass_by(debug: bool) {

}

fn env() {
 println!("Env:");
}

fn help() {
    println!("usage:
--help
    Print this help message.
--env
    Show environment variables and their values.
--debug
    Show debug message (echo the final command arguments generated by this wrapper).
-V
    Show version message.

Available environment variables:
    ${{WRAPPED_CMD}}: the wrapped main command.
    ${{WRAPPED_REMOVE_DUP_ARGS}} : the duplicated arguments to be removed (only keep the first one).
    ${{WRAPPED_REPLACE_ARGS}}: the arguments to be replace.
    ${{WRAPPED_REMOVE_ARGS}}: the arguments to be removed.
    ${{WRAPPED_PREPEND_ARGS}} : the arguments to be appended in frontend of the arguments list.
");
}

fn version(app: String) {

}

fn main() {
    let args: Vec<String> = env::args().collect();

    match args.len() {
        // no arguments passed
        1 => {
            help();
        },
        // other cases
        _ => {
            let cmd = &args[1];
            // parse the command
            match &cmd[..] {
                "--help" => help(),
                "--env" => env(),
                "--debug" => pass_by(true),
                "-V" => version(args[0].clone()),
                _ => {
                    pass_by(false);
                },
            }
        },
    }
}
